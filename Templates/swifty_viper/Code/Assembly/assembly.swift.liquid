//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import Swinject
import SwinjectStoryboard

class {{ module_info.name }}Assembly: BaseAssembly {

static func configure() {
        let cont = defaultContainer()

        cont.register({{ module_info.name }}ViewInput.self) { resolver in
            let story = UIStoryboard.init(name: "{{ module_info.name }}View", bundle: nil)
            let controller = story.instantiateViewController(withIdentifier: "{{ module_info.name }}View") as! {{ module_info.name }}ViewController
            controller.output = resolver.resolve({{ module_info.name }}ViewOutput.self, argument: (controller as {{ module_info.name }}ViewInput))
            return controller
        }.inObjectScope(.transient)

        cont.register({{ module_info.name }}ViewOutput.self, factory: { (resolver: Resolver, view: {{ module_info.name }}ViewInput) in
            let presenter = {{ module_info.name }}Presenter()
            presenter.interactor = resolver.resolve({{ module_info.name }}InteractorInput.self, argument: (presenter as {{ module_info.name }}InteractorOutput))
            presenter.router = resolver.resolve({{ module_info.name }}RouterInput.self, argument: (view as! UIViewController))
            presenter.view = view
            return presenter
        }).inObjectScope(.transient)

        cont.register({{ module_info.name }}InteractorInput.self) { (resolver: Resolver, presenter: {{ module_info.name }}InteractorOutput) in
            let interactor = {{ module_info.name }}Interactor()
            interactor.output = presenter
            return interactor
        }.inObjectScope(.transient)

        cont.register({{ module_info.name }}RouterInput.self) { (resolver: Resolver, view: UIViewController) in
            let router = {{ module_info.name }}Router()
            router.view = view
            return router
        }.inObjectScope(.transient)
    }
}
